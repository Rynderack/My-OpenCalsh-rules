# 机场订阅
proxy-providers:
  Airport1:
    url: "机场订阅"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 📈 订阅更新

# 节点信息
proxies:
  - {name: 直连, type: direct, udp: true}
  - {name: '📈 订阅更新', type: ss, server: lienbagh.yangliq.com, port: 21102, cipher: aes-128-gcm, password: 875fb35e-d63b-4475-9478-133eee9cec26, udp: true}

# 全局配置 
allow-lan: true
bind-address: "*"
ipv6: false
unified-delay: true
tcp-concurrent: true
log-level: warning
find-process-mode: 'off'
# interface-name: en0
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false
profile:
  store-selected: true
  store-fake-ip: true

# DNS模块
dns:
  enable: true
  # listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"
    - "+.services.googleapis.cn"
    - "+.xn--ngstr-lra8j.com"
    - "time.*.com"
    - "+.pool.ntp.org"
    - "+.ntp.tencent.com"
    - "+.ntp1.aliyun.com"
    - "+.ntp.ntsc.ac.cn"
    - "+.cn.ntp.org.cn"
    #小米天气提醒
    - weatherapi.market.xiaomi.com
  default-nameserver:
    - 58.22.96.66
  proxy-server-nameserver:
    - https://dns.alidns.com/dns-query
  # namesever尽量用运营商提供的DNS
  nameserver:
    - 58.22.96.66
    - 218.104.128.106
 
# 出站策略
# 注意锚点必须放在引用的上方，可以集中把锚点全部放yaml的顶部。
pr: &pr {type: select, proxies: [🚀 默认代理, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇯🇵 日本节点, 🇸🇬 新加坡节点, 🇺🇲 美国节点, 🌏 其它地区,♻️ 香港自动,♻️ 台湾自动,♻️ 日本自动,♻️ 新加坡自动,♻️ 美国自动, 直连]}
c1: &c1 {type: select, proxies: [直连, 🚀 默认代理, 🇭🇰 香港节点, 🇹🇼 台湾节点, 🇯🇵 日本节点, 🇸🇬 新加坡节点, 🇺🇲 美国节点, 🌏 其它地区,♻️ 香港自动,♻️ 台湾自动,♻️ 日本自动,♻️ 新加坡自动,♻️ 美国自动]}
proxy-groups:
  - {name: 🚀 默认代理, type: select, proxies: [🇭🇰 香港节点, 🇹🇼 台湾节点, 🇯🇵 日本节点, 🇸🇬 新加坡节点, 🇺🇲 美国节点, 🌏 其它地区,♻️ 香港自动,♻️ 台湾自动,♻️ 日本自动,♻️ 新加坡自动,♻️ 美国自动, 直连]}
  - {name: 🇭🇰 香港节点, type: select, include-all: true, filter: "(?i)香港|港|hk|hongkong|hong kong"}
  - {name: 🇹🇼 台湾节点, type: select, include-all: true, filter: "(?i)台湾|新北|彰化|TW|Taiwan"}
  - {name: 🇯🇵 日本节点, type: select, include-all: true, filter: "(?i)日本|jp|japan|Japan"}
  - {name: 🇸🇬 新加坡节点, type: select, include-all: true, filter: "(?i)新加坡|加坡|狮城|SG|Singapore"}
  - {name: 🇺🇲 美国节点, type: select, include-all: true, filter: "(?i)美国|us|unitedstates|united states"}
  - {name: ♻️ 香港自动, type: url-test, include-all: true, tolerance: 100, interval: 300, filter: "(?i)香港|港|hk|hongkong|hong kong"}
  - {name: ♻️ 台湾自动, type: url-test, include-all: true, tolerance: 100, interval: 300, filter: "(?i)台湾|新北|彰化|TW|Taiwan" }
  - {name: ♻️ 日本自动, type: url-test, include-all: true, tolerance: 100, interval: 300, filter: "(?i)日本|jp|japan|Japan"}
  - {name: ♻️ 新加坡自动, type: url-test, include-all: true, tolerance: 100, interval: 300, filter: "(?i)新加坡|加坡|狮城|SG|Singapore" }
  - {name: ♻️ 美国自动, type: url-test, include-all: true, tolerance: 100, interval: 300, filter: "(?i)美国|us|unitedstates|united states"}
  - {name: 🌏 其它地区, type: select, include-all: true, filter: "^((?!(新加坡|加坡|狮城|SG|Singapore|台湾|新北|彰化|TW|Taiwan|美国|us|unitedstates|united states|日本|jp|japan|Japan|香港|港|hk|hongkong|hong kong)).)*$"}
  - {name: 📹 YouTube, <<: *pr}
  - {name: 📢 谷歌FCM,!!merge <<: *pr}
  - {name: 📧 邮件,!!merge <<: *c1}
  - {name: 🍀 谷歌, <<: *pr}
  - {name: 🤖 AI, <<: *pr}
  - {name: 👨🏿‍💻 GitHub, <<: *pr}
  - {name: 🐬 OneDrive, <<: *pr}
  - {name: Ⓜ️ Bing搜索,!!merge <<: *pr}
  - {name: 🪟 微软, <<: *c1}
  - {name: 🎵 TikTok, <<: *pr}
  - {name: 📲 Telegram, <<: *pr}
  - {name: 📚 多邻国, <<: *c1}
  - {name: 🎥 奈飞, <<: *pr}
  - {name: 🏦 PayPal, <<: *c1}
  - {name: 🎮 Steam,!!merge <<: *pr}
  - {name: 🎮 Xbox,!!merge <<: *c1}
  - {name: 📺 巴哈姆特, type: select, proxies: [♻️ 台湾自动, 🇹🇼 台湾节点, 🚀 默认代理, 🎯 直连]}
  - {name: 🍎 Apple, type: select,!!merge <<: *c1}
  - {name: 🎯 直连,!!merge <<: *c1}
  - {name: 🐟 漏网之鱼, <<: *pr}

# 规则匹配
rules:
  - RULE-SET,private_domain,直连
  - RULE-SET,direct_domain,🎯 直连
  - RULE-SET,proxylite,🚀 默认代理
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,proxylite,🚀 默认代理
  - RULE-SET,ai,🤖 AI
  - RULE-SET,mail_domain,📧 邮件
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,fcm_domain,📢 谷歌FCM
  - RULE-SET,google_domain,🍀 谷歌
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,bing_domain,Ⓜ️ Bing搜索
  - RULE-SET,microsoft_domain,🪟 微软
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,duolingo_domain,📚 多邻国
  - RULE-SET,netflix_domain,🎥 奈飞
  - RULE-SET,paypal_domain,🏦 PayPal
  - RULE-SET,steam_domain,🎮 Steam
  - RULE-SET,xbox_domain,🎮 Xbox
  - RULE-SET,bahamut_domain,📺 巴哈姆特
  - RULE-SET,gfw_domain,🚀 默认代理
  # - RULE-SET,geolocation-!cn,🚀 默认代理
  - RULE-SET,cn_domain,🎯 直连
  - RULE-SET,google_ip,🍀 谷歌,no-resolve
  - RULE-SET,netflix_ip,🎥 奈飞,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 直连
  - MATCH,🐟 漏网之鱼

# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
  yaml: &yaml {type: http, interval: 86400, behavior: domain, format: yaml}
rule-providers: 
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  direct_domain: {!!merge <<: *class, url: "https://raw.githubusercontent.com/Rynderack/My-OpenCalsh-rules/refs/heads/main/rules/Direct.list"}
  proxylite: {!!merge <<: *class, url: "https://raw.githubusercontent.com/Rynderack/My-OpenCalsh-rules/refs/heads/main/ProxyLite.list"}
  ai: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-chat-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  fcm_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/googlefcm.mrs"}
  mail_domain: {!!merge <<: *yaml, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Mail/Mail.yaml"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  duolingo_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/duolingo.mrs"}
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  steam_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/steam.mrs"}
  xbox_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/xbox.mrs"}
  bahamut_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/bahamut.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  bing_domain: {!!merge <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/bing.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  # geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}

